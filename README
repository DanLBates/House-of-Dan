House-of-Dan README 27-Sep-2017 5:40:39 pm
House-of-Dan README 05-Sep-2017 3:56:16 pm
House-of-Dan README 06-Jul-2017 6:07:01 pm

I wanted to play with the  x86-64 architecture. The Ubuntu
distribution of Linux had the AT&T syntax assembler. The linker ld and
the debugger gdb.

I took the documentation I could find on the 64 bit Linux calls and
put them in the file:

Linux.s

I wanted to both learn of the x64 changes and have a useful tool box
should I want to develope more x86-64 bit assembly code.

The test driver for as_util_.s is in the file. To assemble with the
test driver - there is a ".if 1" just before the line .globl _start.
To have a tool box to link with another assembly source change the
".if 1" to a ".if 0"

To build the utility:
$ as as_util_.s -o as_util_.o
$ ld as_util_.o -o as_util_

To build for use with gdb add a -g option in the assemble step.

All the globally defined entry points have as_u_ as a prefix.

First as_u_DisplayInline has a message encoded in a zero terminated
ascii string immediatly after the call as_u_DisplayInline.
take care to use .asciz and not .ascii . To leave the zero termination
off means a) we don't know how much to display and b) we don't know
where to return to. No doubt we will find a 0 byte somewhere. The
probable outcome would be some kind of fault. The .asciz provides
the zero termination.
ex:
        call as_u_DisplayInline
        .asciz "message text\n"

as_u_NL merely displays the newline '\n' (0x0A, ^J) character.
ex:
        call as_u_NL

as_u_Blank is similar and displays an ascii space ' ' (0x20).
ex:
        call as_u_Blank

as_u_PhexCl takes the number in %rax and displays it in hexadecimal.
The low order %cl nibbles are displayed.
ex:
        call as_u_PhexCl

as_u_Phex16 is much the same except the number of nibbles is 16.
ex:
        call as_u_Phex16

as_u_Phex8 is the same except the number of nibbles is 8.
ex:
        call as_u_Phex8
as_u_Phex4  ditto 4 nibbles.

as_u_Phex2  ditto 2 nibbles.

as_u_Phex1  ditto 1 nibble.

as_u_DumpRIP prints out the location (address) of the next instruction
after the call (a kind of trace).
ex:
        call as_u_DumpRIP

as_u_PSDec   displays %rax as a ascii decimal number interpreted as
signed.
ex:
        call as_u_PSDec

as_u_PUDec   displays %rax as a ascii decimal number interpreted as
unsigned.
ex:
        call as_u_PUDec

as_u_dump  displays a memory dump of the memory pointed to by %rcx
through the memory pointed to by %rdx.
ex:
        call as_u_dump

as_u_DumpRegs dumps the registers of the caller. Including the flags
register and %rip.

The output of the test driver looks somewhat like:
$ as as_util_.s -o as_util_.o
$ ld as_util_.o -o as_util_
./as_util_
FEDCBA9876543210
76543210
3210
10
0
FEDCBA9876543210
43210
The first two
   lines.
The last line.
RIP reaches 0000000000400107
RIP reaches 000000000040010C
RIP reaches 0000000000400111
RIP reaches 0000000000400116
RIP reaches 000000000040011B
-1234567890
18446744072474983726
8
9876543210

rax=000000024CB016EA rbx=0000000000000000 rcx=0000000000000005 rdx=0000000000000000
rsi=0000000000000000 rdi=0000000000000000 rbp=0000000000000000 rsp=00007FFD532CE510
 r8=0000000000000000  r9=0000000000000000 r10=0000000000000000 r11=0000000000000206
r12=0000000000000000 r13=0000000000000000 r14=0000000000000000 r15=0000000000000000
  F=0000000000000206 rip=0000000000400160

Now to test the dump function 1
00007FFD532CE440 3B 06 40 00 00 00 00 00 D3 02 40 00 00 00 00 00 ;.@.......@.....
00007FFD532CE450 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ................
00007FFD532CE460 01 00 00 00 00 00 00 00 3B 06 40 00 00 00 00 00 ........;.@.....
00007FFD532CE470 60 01 40 00 00 00 00 00 7F 06 40 00 00 00 00 00 `.@.......@.....
00007FFD532CE480 EA 16 B0 4C 02 00 00 00 00 00 00 00 00 00 00 00 ...L............
00007FFD532CE490 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
00007FFD532CE4A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
00007FFD532CE4B0 00 00 00 00 00 00 00 00 10 E5 2C 53 FD 7F 00 00 ..........,S....
00007FFD532CE4C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
00007FFD532CE4D0 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 ................
00007FFD532CE4E0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
00007FFD532CE4F0 EA 16 B0 4C 02 00 00 00 06 02 00 00 00 00 00 00 ...L............
00007FFD532CE500 00 00 00 00 00 00 00 00 00                      .........

Dump 2 seeded 4 same lines dump 2
00007FFD532CE440 3B 06 40 00 00 00 00 00 D3 02 40 00 00 00 00 00 ;.@.......@.....
00007FFD532CE450 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ................
00007FFD532CE460 01 00 00 00 00 00 00 00 3B 06 40 00 00 00 00 00 ........;.@.....
00007FFD532CE470 60 01 40 00 00 00 00 00 7F 06 40 00 00 00 00 00 `.@.......@.....
00007FFD532CE480 EA 16 B0 4C 02 00 00 00 00 00 00 00 00 00 00 00 ...L............
00007FFD532CE490 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
                        SAME
00007FFD532CE4C0 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
00007FFD532CE4D0 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 ................
00007FFD532CE4E0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
00007FFD532CE4F0 EA 16 B0 4C 02 00 00 00 06 02 00 00 00 00 00 00 ...L............
00007FFD532CE500 00 00 00 00 00 00 00 00 00                      .........

Now to test the dump function 3
00007FFD532CE445                00 00 00 D3 02 40 00 00 00 00 00      .....@.....
00007FFD532CE450 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ................
00007FFD532CE460 01 00 00 00 00 00 00 00 3B 06 40 00 00 00 00 00 ........;.@.....
00007FFD532CE470 60 01 40 00 00 00 00 00 7F 06 40 00 00 00 00 00 `.@.......@.....
00007FFD532CE480 EA 16 B0 4C 02 00 00 00 00 00 00 00 00 00 00 00 ...L............
00007FFD532CE490 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
                        SAME
00007FFD532CE4C0 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
00007FFD532CE4D0 00 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 ................
00007FFD532CE4E0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................
00007FFD532CE4F0 EA 16 B0 4C 02 00 00 00 06 02 00 00 00 00 00 00 ...L............
00007FFD532CE500 00 00 00 00                                     ....

Now a short dump of 6 bytes
00007FFD532CE445                00 00 00 D3 02 40                     .....@

The .s files in the repository are terminated with carriage return line feeds.
To use this on a Linux system (where it is intended for) feel free to change
these to line feed's.

Have Fun.

======================================================================
DanTypes.h:

Useful Types and Macros developed and imported over years.
Most of these when used make things easier and the intent of
the Code more transparent.
======================================================================
The book 'Hacker's Delight' by Henry S. Warren ISBN 0-201-91465-4
has an elegant algorithm for finding the 32 bit unsigned integer
reciprocal of a number. This allows one to replace a division
(by a constant) with a multiply, a shift and occasionally
needed add. This is found on page 185.

This replaces division by a constant or division by a one of a
limited number of constants.

I reworked the math and have 8 bit and 16 bit solutions as well.
These are found in:

SignedMagic.cpp    SignedMagic8.cpp   UnSignedMagic16.cpp
SignedMagic16.cpp  UnSignedMagic.cpp  UnSignedMagic8.cpp

The 8 bit and 16 bit are a logical extension as some 8 bit and
16 bit architectures have no divide instruction. The software
emulation of the divide is a very expensive operation.

I have worked through the math twice to convince myself this
works. Still since it seems like magic (I named the program
magic), I added a check dividing every number in the
domain by the constant and comparing with the magic method.
For 32 bits this takes several minutes, so the check is by
request. For 16 and 8 bits the check is fast enough to just
do it. I would note that I have never had the check find a
problem, except for finagling of the test needed to verify
the validity of the check code.

The same technique can be extended to 64 bits. However, the 64 bit
architectures have a divide - so what's the point. If a 64 bit
extension is coded you can forget about the test as the run time
would be years.

I once had to normalize an array of 8 bit atod values. This
involved a subtract a multiply and 16 bit divide for every
number in the array. The number for the subtract, the multiply
and the divide was invariant with respect to the atod trace.
I used a variant of the 16 bit version of Magic
which produced an h file containing the 256 16 bit values for
the reciprocal, the shift and the optional add.

Including the h file in a c interface which found the values
needed by indexing into the table. The list and values were
passed to an architecture ARM7TDMI (w/o Divide) where a
pipelined assembly function normalized the values.

I have even used the 8 bit version with Micro Chip 4520's
with success.

======================================================================
The classic 8 Queens placed on a Chess board which
do not attack each other has had a elegant solution
introduced by Dijkstra and Wirth. When coded in C or C++
the elegance vanishes with the harsh bare bones array of
the C language.

With some MACROS for pointer arithmetic, The elegance is
brought back to a C implementation: The use of Row+Column
and Row-Column as an index in C. (you need to have array bound
checking disabled). I Present:

Queens8.c

======================================================================
Scheme Toys to solve Word Logic problems.

The tool kit to allow the problems to be solved is:

amb.scm

This has amb defined which causes backtracking to an earlier
machine state. The machine states are saved with a
call-with-current-continuation. There are also operations
defined such as required, associated?, notassociated, permute,
set-difference and others which the logic problems are defined
with.

Each of the logic problems:
floors.scm
lolla.scm
sorority.scm
einstein.scm
kalotan.scm
marriage.scm   and
yachts.scm

does a (load "amb.scm")
to have access to the tool box.

The key to all this is permute which saves the machine state and
generates a new permutation. If there is an amb-fail - it restores
to the permute and permute generates the next permutation. When
permute runs out of permutations it introduces a amb-fail of it's
own.

All these are in the R5RS dialect of scheme.
To run these from Dr. Racket

select

Language
    Choose Language
        Other Languages
            R5RS
Run

======================================================================
Included is a International Morse Code Practice program. Before we
discuss that I wish to talk about 2 support programs for the Morse
Practice program.

first: MorseCodeTables.c
This program reads in a definition of the International Morse Code and
produces a dot h file : MorseTable.h

which is included in the compilation of MCP.c.
The source read in is: MorseTones.txt
The definitions look like:
X -..-
Y -.--
Z --..
1 .----
2 ..---
3 ...--
No Morse Code symbol with the exception of "error" (8 dits) has more
than 7 elements.
This allows each symbol to be stored in a byte. Since to encoding is
not a fixed length of elements (di's or dah's) we add a special stop
bit to indicate the end of the symbol. Just like serial encoding the
lowest bit is sent first. As we send each element (0=dit, 1=dah) we
shift right. When we see the byte as 0 or 1 (the stop bit) we are
done.
MorseTable.h looks like:
/*8*/ 0x27, /*9*/ 0x2f, /*:*/ 0x47, /*;*/ 0x55, /*<*/ 0x00, /*=*/ 0x00, /*>*/ 0x00, /*?*/ 0x4c,
/*@*/ 0x56, /*A*/ 0x06, /*B*/ 0x11, /*C*/ 0x15, /*D*/ 0x09, /*E*/ 0x02, /*F*/ 0x14, /*G*/ 0x0b,
/*H*/ 0x10, /*I*/ 0x04, /*J*/ 0x1e, /*K*/ 0x0d, /*L*/ 0x12, /*M*/ 0x07, /*N*/ 0x05, /*O*/ 0x0f,

The other support program is: mcpexergen.c
This generates random code groups to use with the MCP program.

C:\DADS\MySoftware\Public>mcpexergen

characters for exercize:ABCD05

GroupSize:5

No of groups to generate:20

Output File Name:x.t

characters   = ABCD05
No of chars  = 6
Group size   = 5
No of Groups = 20
out file     = x.t
Start generation?Y
A05AA5505DBABBBDAAC5DA5CACBA05BACACB5BAD5D5CBABDA0D50AD5DC0A500CDDA0ACDDAB00ABBB
DAA0DBD0ACDB550BCDC0
Complete!!!

In this case x.t would look this although the words would be different:
A05AA 5505D BABBB DAAC5 DA5CA CBA05 BACAC B5BAD 5D5CB ABDA0
D50AD 5DC0A 500CD DA0AC DDAB0 0ABBB DAA0D BD0AC DB550 BCDC0

This needs only 1 line added to the beginning to be a source for MCP.
that line looks like:
Hz=600,WPM=6
where we want the Morse Tones to be at a frequency of 600 Hertz and
the rate sent to be 6 words per minute. The rate is calculated using the
words "PARIS" and "CODEX". Real copy will be slower for long words and
faster for shorter words.

This brings us to the Morse Code Practice Program itself: MCP.c

This is invoked in a DOS or Linux equivalent as
MCP testdata.txt

The first line of the testdata gives Tone frequency and speed in Words Per
Minute. ex: Hz=800,WPM=7 (600 hertz is more common.
If the last line of testdata is the dollar '$' alone the test data is
treated as one message to be tested with or played as a whole.
No $ on end then each line is a independent test/play phrase.

The banner for the program is displayed when MCP is executed:

Morse Code Practice program MCP 0.0     16-June-2017

Then menu for the program is then displayed:

MCP 0.0 16-June-2017
Number of Strings = 204
Words Per Minute = 6
 dittime=166 dahtime=498 elementspace=166 charspace=498 wordspace=1162
 #-Plays=0 #-Tests=0 Errors=0
^A Show the answer phrase          ^C Control vars
^E Echo back phrase                ^H Help with character
^Q quit/exit                       ^M this menu
^P Play All                        ^R Resend last character
^S select a test phrase Randomly   ^T Test you one char at a time
^V Show Error Count                ^X quit/exit
^Z Whatever Test function we need! 0  Zero the Test Count.

When not testing a phrase the control key with the function is not
needed ex: ^M is equivalent to M.

If the test data is not one big phrase (no $ at the bottom), you
select a phrase with 'S'
This selects one of the phrases randomly. It also selects a skip value
from a list of prime numbers. If the skip divides the number of phrases,
then we make skip go to the next prime in the list with wrap-around
until it does not evenly divide the number of phrases. By adding skip in
a modulo fashion for each new select, this will go
through every phrase before repeating. When the initial phrase is
repeated we go to the next prime in the list in the same fashion as
before.

To cheat use 'A'. Or play the phrase writing it down then use A to check.

'P' plays the phrase for you to copy. This is where you want to be.

'T' Outputs each character and waits for you to type it back in.
If you want to hear the character again - type control ^R. If you don't know
and want to skip type ^H, this shows the character in lower case and
continues. If you type the wrong character the program will complain with
a beep (1000Hz) and wait for you to enter the character again.
To give up type ^M.

If there are a few characters you want a quick review of the Echo 'E'
will let you type in a phrase and then play it and/or test with it.

When you get over wanting to test, but find the speed of play a little
much - you can cheat with the 'C' Control Vars.
The following example puts 1 second after each charater and 2 seconds
after each word:

Hertz for tone:600 Change Yes or No?N

Words Per Minute:6 Change Yes or No?N

Dittime:166 Change Yes or No?N

Dahtime:498 Change Yes or No?N

Element Space:166 Change Yes or No?N

Character Space:498 Change Yes or No?Y
Character Space:1000

Word Space:1162 Change Yes or No?Y
Word Space:2000

Control Vars Done
If you do change Word Per Minute then Dittime, Dahtime, Element Space,
Character Space and Word Space are recalculated.

There are a number of practice files in the repository.
mcp.txt         - A lot of phrases some numbers.
difficult.txt   - Phrases a little more difficult then mcp.txt
mcpnumbers.txt  - Just numbers
mcppunc.txt     - Punctuation marks
mcpran5.txt     - 5 letter random code groups A to Z with numbers.

MCP has a scripting capability. International Morse Code has an
apostrophe ` and does not have the equivalent to ascii single quote '.
text within single quotes is simply output. This give MCP a crude
ability to tutor one in International Morse Code.

We split the alphabetics and some of the numbers as follows:
Group 1  50ETAR
Group 2  SLUQJ
Group 3  HONCV
Group 4  IBYP
Group 5  WKZM
Group 6  DXFG

G1.txt  --- Introduces group 1.
G2.txt  --- adds group 2 and reviews 1 & 2.
G3.txt  --- adds group 3 and reviews 1,2 & 3.
G4.txt  --- adds group 4 and reviews 1,2,3 & 4
G5.txt  --- adds group 5 and reviews 1..4 & 5
G6.txt  --- adds group 6 and reviews all groups

G1mcp.txt --- group 1 practice
G2mcp.txt --- groups 1 & 2 practice.
G3mcp.txt --- groups 1,2 & 3 practice.
G4mcp.txt --- groups 1..4 practice.
G5mcp.txt --- groups 1..5 practice.

The MCP.c source does use the windows.h interface Beep. To move
to Linux a suitable replacement would have to be found.

Note: this exercize program does not take the place of other
learning help such as ARRL practice sessions.

20170905

Modified morse code practice to output a high frequency beep one
second after finishing playing a phrase. So the learner can know to
stop copying and select another phrase or whatever with the program.

Sometimes events like phone calls interrupt Morse Code practice.
added a - command which decrements the Play count by one. So if
you are keeping track of exercizes the count become how many phrases
are actually finished.

Added some phrases to mcp.txt

======================================================================
11-Sep-2017 4:20:15 pm
I have experimented with TkInter and put a sample together to
Use as a reference. This reference (a working Tkinter example) I now
include in my Git Hub account. Included MyTkinterRef.py
Similarly I have experimented with the asyncio Python co-routines. I
include asyncio.py as well.
lately (2017-07) I have been learning Python with the help of books
and New Boston videos.
lately (2017-09) Also took an MIT mooc course on Python through edx.

======================================================================

To exercize some of the elegant features of Python I wrote this
program which solves Bucket puzzles with up to 3 Buckets. I labeled
these A, B and C. To solve a 2 bucket problem is easy - make the
capacity of C be 0.

In a Bucket puzzle, the goal is to have a certain amount of liquid
in either a single bucket or the sum of some combination of buckets.

The operations permitted are:
1) To empty a single bucket
2) To fill a single bucket to capacity (ex: from a pond or a hose)
3) To pour a Bucket x into a bucket y until one of these is true:
        a) bucket x is empty and bucket y is not full.
        b) bucket y is full (at capacity) and bucket x may or may not
                have liquid left in it.

The units can be anything since they apply to all the buckets
(ex: gallons or barrels).

The method is by creating a state tree and doing a breadth first search.
When a solution is found, we recursivly follow the back links to
the initial state and print the states and operations out before
returning.

If the tree becomes exhausted w/o finding the goal a message is
printed to inform of this fact.

The program prompts for the goal, the bucket capacities and
initial state of the buckets (typically 0). For fun the initial
state does not have to be possible (<= capacity).

Have Fun
For your perusal:
BucketPuzzle.py
======================================================================
27-Sep-2017 5:41:46 pm     MultiCoreDes.py

In my Python Learning I have now worked with the multiprocessing
module. This is a heavy weight process instead of light weight
threads. The multiprocessing module trys to spread these amoung the
available CPU cores. The entire process space is spawned including
the Python Interpreter a lot like fork().

What I did was to use pip to install the pyDes module. This has
within it processing for the Data Encryption Standard and triple-DES
as well.

These are each symetric block ciphers with block length being 8 bytes.

As the DES standard became more dated, an attempt was made to give it
a little more life. Instead of one DES step with one 64 bit key, Three
are used each with there own 64 bit key for a total of 192 bits of key.

To encrypt one would use stage one to encrypt stage 2 to decrpyt and
stage 3 to encrypt.

To decrypt use stage 3 to decrypt and stage 2 to encrypt and stage 1
to decrypt.

Having 4 cores on my Acer laptop worked out perfectly.

I spawn 3 identical processes with different arguments. Each in a
different core. The main process feeds queue q1 with 8 byte blocks
of plain text.

Process p1 takes 8 byte blocks from queue q1, encrypts
them with it's key and puts the result in queue q2.

Process p2 takes it's data from queue q2, decrypts it and passes it
through queue q3.

Process p3 takes what is passed to it though queue q3, encrypts it
and passes the result through queue qr to the main process.

This happens in parallel. Making this a pipelined triple DES machine.

I also use pyDes's triple DES for a comparison. I check the results
against each other.

I also got timing information.

For 10,000 blocks the multicore pipelined implementation is 2.5 x
the single core solution.

For 100 blocks the single core is 1.015 times faster than the multi
core.

Somewhere between 100 and 10,000 is a cross over point. As you
amortize the startup cost of the multicore soloution over many more
blocks it does better.

While DES is a dated standard we could easily do the same with AES
making a 3 or more stage AES.

To run this, load up MultiCoreDes.py. You can change the blocks for
the test at that point. If you want one thousand block you need to
type in the

line:CHUNKS = 1000

Start the benchmark by typing the

line:Main()

With the soon to come Quantum computers just maybe we can stay one
step a head so the "North Koreans" don't read our private
communications.

This also clearly shows with multiple cores the hardware technique
of pipelining is a tool in the software engineers tool belt.

in the GITHub MultiCoreDes.py.  Enjoy!
======================================================================
